{"version":3,"sources":["components/countries-container/country-card/CountryCard.jsx","components/countries-container/CountriesContainer.jsx","components/filter-countries-text-input/FilterCountriesTextInput.jsx","components/filter-region-dropdown/FilterRegionDropdown.jsx","pages/home/home-utils.js","state.js","pages/home/Home.jsx","pages/country/CountrySummary.jsx","components/nav-bar/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["CountryCard","capital","flag","name","onClick","population","region","className","src","alt","toLocaleString","CountriesContainer","countries","history","useHistory","map","country","index","push","FilterCountriesTextInput","onChange","value","htmlFor","id","placeholder","FilterRegionDropdown","options","option","extractRegions","regions","Set","filter","filterCountriesByName","nameFilter","lowerCasedNameFilter","toLowerCase","trim","includes","filterCountriesByRegion","regionFilter","AppStateContext","createContext","AppDispatchContext","reducer","state","action","type","payload","countryFilter","home","filterCountriesValue","filterRegionValue","Error","initialState","AppProvider","children","useReducer","dispatch","Provider","useApp","useContext","HomeCore","onChangeForCountriesInput","onChangeForRegionInput","valueForFilterCountries","valueForFilterRegion","filteredCountries","filterCountries","HomeFormControls","optionsForRegionDropdown","HomeWrapper","useState","loading","setLoading","useEffect","a","length","fetch","response","json","data","event","target","CountrySummaryCore","nativeName","subregion","CountrySummaryWrapper","useParams","countryData","setCountryData","find","NavBar","App","component","CountrySummary","path","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce649d59.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './CountryCard.css'\r\n\r\nexport default function CountryCard({\r\n  capital,\r\n  flag,\r\n  name,\r\n  onClick,\r\n  population,\r\n  region\r\n}) {\r\n  return (\r\n    <div className=\"country-card\" onClick={onClick}>\r\n      <div className=\"country-card-flag-container\">\r\n        <img className=\"country-card-flag\" src={flag} alt={`${name} flag`}/>\r\n      </div>\r\n      <div className=\"country-card-info-container\">\r\n        <div className=\"country-card-country-name\">{name}</div>\r\n        <div className=\"country-card-data-container\">\r\n          <div><span className=\"country-card-data-text-bold\">Population: </span>{population.toLocaleString('en-us')}</div>\r\n          <div><span className=\"country-card-data-text-bold\">Region: </span>{region}</div>\r\n          <div><span className=\"country-card-data-text-bold\">Capital: </span>{capital}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport CountryCard from './country-card/CountryCard'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport './CountriesContainer.css'\r\n\r\nexport default function CountriesContainer({\r\n  countries\r\n}) {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <div className=\"countries-container\">\r\n      {countries.map((country, index) => (\r\n        <div key={index} className=\"country-card-wrapper\">\r\n          <CountryCard\r\n            capital={country.capital}\r\n            flag={country.flag}\r\n            name={country.name}\r\n            onClick={() => history.push(`/country/${country.name}`)}\r\n            population={country.population}\r\n            region={country.region}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\n\r\nimport './FilterCountriesTextInput.css'\r\n\r\nexport default function FilterCountriesTextInput\r\n({\r\n  onChange,\r\n  value\r\n}) {\r\n  return (\r\n    <div className=\"filter-countries-text-input-container\">\r\n      <label className=\"filter-countries-text-label\" htmlFor=\"filter-countries-text-input\">Filter Text Input</label>\r\n      <input className=\"filter-countries-text-input\" id=\"filter-countries-text-input\" name=\"filter-countries-text-input\" onChange={onChange} value={value} placeholder=\"e.g. Brazil\"/>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport './FilterRegionDropdown.css'\r\n\r\nexport default function FilterRegionDropdown({\r\n  onChange,\r\n  options,\r\n  value\r\n}) {\r\n  return (\r\n    <select value={value} className=\"filter-region-dropdown\" onChange={onChange}>\r\n      <option value={''}>None</option>\r\n      {options.map(option => (\r\n        <option key={option} value={option}>{option}</option>\r\n      ))}\r\n    </select>\r\n  )\r\n}","/**\r\n * @description Function used to extract the regions out of\r\n * an array of countries, for the filter regions control\r\n * @param {Array<Object>} countries (from API)\r\n * @returns {Array<String>}\r\n */\r\nexport function extractRegions(countries) {\r\n  const regions = countries.map(country => country.region)\r\n  return [...new Set(regions)].filter(region => region !== '')\r\n}\r\n\r\n/**\r\n * @description Function used to get the \"filtered\" version of\r\n * a countries array, where the filter can be applied by the user;\r\n * this is essentially a wrapper for calling both filter by country\r\n * and region\r\n * @param {Array<Object>} countries (from API)\r\n * @param {String} regionFilter\r\n * @param {String} nameFilter\r\n * @returns {Array<Object>}\r\n */\r\nexport function filterCountries(countries, regionsFilter = '', nameFilter = '') {\r\n  const filteredByRegions = filterCountriesByRegion(countries, regionsFilter)\r\n  return filterCountriesByName(filteredByRegions, nameFilter)\r\n}\r\n\r\n/**\r\n * @description Function used to filter countries by region\r\n * @param {Array<Object>} countries (from API)\r\n * @param {String} nameFilter\r\n * @returns {Array<Object>}\r\n */\r\nexport function filterCountriesByName(countries, nameFilter = '') {\r\n  // Normalize to ensure proper comparison \r\n  const lowerCasedNameFilter = nameFilter.toLowerCase() \r\n  return nameFilter.trim() !== '' ? countries.filter(country => country.name.toLowerCase().includes(lowerCasedNameFilter)) : countries\r\n}\r\n\r\n/**\r\n * @description Function used to filter countries by region\r\n * @param {Array<Object>} countries (from API)\r\n * @param {String} regionFilter\r\n * @returns {Array<Object>}\r\n */\r\nexport function filterCountriesByRegion(countries, regionFilter) {\r\n  return regionFilter !== '' ? countries.filter(country => country.region === regionFilter) : countries\r\n}","import { useReducer, useContext, createContext } from 'react'\r\n\r\n/**\r\n * @description Module that contains the code associated to the\r\n * application state\r\n */\r\n\r\nconst AppStateContext = createContext()\r\nconst AppDispatchContext = createContext()\r\n\r\n/**\r\n * @description Global application reducer that handles a hand full of actions\r\n */\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOAD_COUNTRIES':\r\n      const { countries } = action.payload\r\n      return {\r\n        ...state,\r\n        countries\r\n      }\r\n    case 'UPDATE_COUNTRY_FILTER':\r\n      const { countryFilter } = action.payload\r\n      return {\r\n        ...state,\r\n        home: {\r\n          ...state.home,\r\n          filterCountriesValue: countryFilter\r\n        }\r\n      }\r\n    case 'UPDATE_REGION_FILTER':\r\n      const { regionFilter } = action.payload\r\n      return {\r\n        ...state,\r\n        home: {\r\n          ...state.home,\r\n          filterRegionValue: regionFilter\r\n        }\r\n      }\r\n    default:\r\n      throw new Error(`Unknown action: ${action.type}`)\r\n  }\r\n}\r\n\r\nconst initialState = {\r\n  countries: [],\r\n  home: {\r\n    filterCountriesValue: '',\r\n    filterRegionValue: ''\r\n  }\r\n}\r\n\r\n/**\r\n * @description Wrapper for using within App.js -- avoids having to import both\r\n * providers and thus, helps keep low level state code out of app.js (example\r\n * the amount of dispatchers/reducers used changes)\r\n */\r\nexport const AppProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  return (\r\n    <AppDispatchContext.Provider value={dispatch}>\r\n      <AppStateContext.Provider value={state}>\r\n        {children}\r\n      </AppStateContext.Provider>\r\n    </AppDispatchContext.Provider>\r\n  )\r\n}\r\n\r\n/**\r\n * @description Mini hooks that can be imported within the page components;\r\n * this helps avoid having to import both the context and useContext hook\r\n * within the components that use it\r\n */\r\nexport const useApp = () => useContext(AppStateContext)\r\nexport const useAppDispatch = () => useContext(AppDispatchContext)","import React, { useEffect, useState } from 'react'\r\nimport CountriesContainer from '../../components/countries-container/CountriesContainer'\r\nimport FilterCountriesTextInput from '../../components/filter-countries-text-input/FilterCountriesTextInput'\r\nimport FilterRegionDropdown from '../../components/filter-region-dropdown/FilterRegionDropdown'\r\nimport { extractRegions, filterCountries } from './home-utils'\r\nimport { useApp, useAppDispatch } from '../../state'\r\n\r\nimport './Home.css'\r\n\r\nexport function HomeCore({\r\n  countries,\r\n  onChangeForCountriesInput,\r\n  onChangeForRegionInput,\r\n  regions,\r\n  valueForFilterCountries,\r\n  valueForFilterRegion\r\n}) {\r\n  const filteredCountries = filterCountries(countries, valueForFilterRegion, valueForFilterCountries)\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <HomeFormControls\r\n        onChangeForCountriesInput={onChangeForCountriesInput}\r\n        onChangeForRegionInput={onChangeForRegionInput}\r\n        optionsForRegionDropdown={regions}\r\n        valueForFilterCountries={valueForFilterCountries}\r\n        valueForFilterRegion={valueForFilterRegion}\r\n      />\r\n      <CountriesContainer countries={filteredCountries}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction HomeFormControls({\r\n  onChangeForCountriesInput,\r\n  onChangeForRegionInput,\r\n  optionsForRegionDropdown,\r\n  valueForFilterCountries,\r\n  valueForFilterRegion\r\n}) {\r\n  return (\r\n    <div className=\"home-form-controls\">\r\n      <FilterCountriesTextInput\r\n        onChange={onChangeForCountriesInput}\r\n        value={valueForFilterCountries}\r\n      />\r\n      <FilterRegionDropdown\r\n        onChange={onChangeForRegionInput}\r\n        options={optionsForRegionDropdown}\r\n        value={valueForFilterRegion}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function HomeWrapper() {\r\n  const dispatch = useAppDispatch()\r\n  const { countries, home: { filterRegionValue, filterCountriesValue } } = useApp()\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    (async function() {\r\n      /**\r\n       * HACK: Only fetch once\r\n       */\r\n      if (countries.length === 0) {\r\n        const response = await fetch('https://restcountries.com/v2/all')\r\n        const data = await response.json()\r\n        dispatch({\r\n          type: 'LOAD_COUNTRIES',\r\n          payload: {\r\n            countries: data\r\n          }\r\n        })\r\n      }\r\n      setLoading(false)\r\n    })()\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !loading && countries.length > 0 ?\r\n          <HomeCore\r\n            countries={countries}\r\n            onChangeForCountriesInput={event => dispatch({ type: 'UPDATE_COUNTRY_FILTER', payload: { countryFilter: event.target.value } })}\r\n            onChangeForRegionInput={event => dispatch({ type: 'UPDATE_REGION_FILTER', payload: { regionFilter: event.target.value } })}\r\n            regions={extractRegions(countries)}\r\n            valueForFilterCountries={filterCountriesValue}\r\n            valueForFilterRegion={filterRegionValue}\r\n          /> :\r\n          <div>loading...</div>\r\n      }\r\n    </>\r\n  )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { useApp } from '../../state'\r\n\r\nimport './CountrySummary.css'\r\n\r\nexport function CountrySummaryCore({\r\n  flag,\r\n  nativeName,\r\n  population,\r\n  region,\r\n  subregion,\r\n  capital,\r\n  name\r\n}) {\r\n  return (\r\n    <div className=\"country-summary\">\r\n      <div className=\"country-summary-flag-parent-container\">\r\n        <div className=\"country-summary-flag-container\">\r\n          <img src={flag} className=\"country-summary-flag\" alt={`${name} flag`}/>\r\n        </div>\r\n      </div>\r\n      <div className=\"country-summary-text-container\">\r\n        <div className=\"country-summary-name\">{name}</div>\r\n        <div className=\"country-summary-other-info-container\">\r\n          <div className=\"country-summary-other-info\">Native Name: {nativeName}</div>\r\n          <div className=\"country-summary-other-info\">Population: {population.toLocaleString('en-us')}</div>\r\n          <div className=\"country-summary-other-info\">Region: {region}</div>\r\n          <div className=\"country-summary-other-info\">Sub Region: {subregion}</div>\r\n          <div className=\"country-summary-other-info\">Capital: {capital}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function CountrySummaryWrapper() {\r\n  const { countries } = useApp()\r\n  const { name } = useParams()\r\n  const history = useHistory()\r\n  const [countryData, setCountryData] = useState({})\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Only load if there is country data; redirect to home if there is no data\r\n     */\r\n    if (countries.length === 0) {\r\n      return history.push('/')\r\n    } else {\r\n      /**\r\n       * Assume country exists for now\r\n       */\r\n      setCountryData(countries.find(country => country.name.trim() === name))\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {countryData.name ?\r\n          <CountrySummaryCore\r\n            flag={countryData.flag}\r\n            nativeName={countryData.nativeName}\r\n            population={countryData.population}\r\n            region={countryData.region}\r\n            subregion={countryData.subregion}\r\n            capital={countryData.capital}\r\n            name={countryData.name}\r\n          /> :\r\n          <div>loading...</div>\r\n      }\r\n    </>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport './NavBar.css'\r\n\r\nexport default function NavBar() {\r\n  return (\r\n    <div className=\"nav-bar\">\r\n      <div className=\"nav-bar-text\">Where in the world?</div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport { HomeWrapper as Home } from './pages/home/Home'\nimport { CountrySummaryWrapper as CountrySummary } from './pages/country/CountrySummary'\nimport NavBar from './components/nav-bar/NavBar'\nimport { AppProvider } from './state'\n\nfunction App() {\n  return (\n    <Router>\n      <AppProvider>\n        <div className=\"app\">\n          <NavBar/>\n          <Switch>\n            <Route component={CountrySummary} path=\"/country/:name\"/>\n            <Route component={Home} path=\"/\"/>\n          </Switch>\n        </div>\n      </AppProvider>\n    </Router>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}