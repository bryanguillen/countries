{"version":3,"sources":["components/countries-container/country-card/CountryCard.jsx","components/countries-container/CountriesContainer.jsx","components/filter-countries-text-input/FilterCountriesTextInput.jsx","components/filter-region-dropdown/FilterRegionDropdown.jsx","pages/home/home-utils.js","app-context.js","pages/home/Home.jsx","pages/country/CountrySummary.jsx","components/nav-bar/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["CountryCard","capital","flag","name","onClick","population","region","className","src","alt","CountriesContainer","countries","history","useHistory","map","country","index","push","FilterCountriesTextInput","onChange","value","htmlFor","id","placeholder","FilterRegionDropdown","options","defaultValue","option","extractRegions","regions","Set","filter","filterCountriesByName","nameFilter","lowerCasedNameFilter","toLowerCase","trim","includes","filterCountriesByRegion","regionFilter","AppContext","React","createContext","HomeCore","onChangeForCountriesInput","onChangeForRegionInput","valueForFilterCountries","filteredCountries","filterCountries","valueForFilterRegion","HomeFormControls","optionsForRegionDropdown","HomeWrapper","useContext","appState","setAppState","useState","filterCountriesValue","setFilterCountriesValue","filterRegionValue","setFilterRegionsValue","loading","setLoading","useEffect","a","length","fetch","response","json","data","event","target","CountrySummaryCore","nativeName","subregion","CountrySummaryWrapper","useParams","countryData","setCountryData","find","NavBar","App","Provider","component","CountrySummary","path","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ee26b54.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './CountryCard.css'\r\n\r\nexport default function CountryCard({\r\n  capital,\r\n  flag,\r\n  name,\r\n  onClick,\r\n  population,\r\n  region\r\n}) {\r\n  return (\r\n    <div className=\"country-card\" onClick={onClick}>\r\n      <div className=\"country-card-flag-container\">\r\n        <img className=\"country-card-flag\" src={flag} alt={`${name} flag`}/>\r\n      </div>\r\n      <div className=\"country-card-info-container\">\r\n        <div className=\"country-card-country-name\">{name}</div>\r\n        <div className=\"country-card-data-container\">\r\n          <div><span className=\"country-card-data-text-bold\">Population: </span>{population}</div>\r\n          <div><span className=\"country-card-data-text-bold\">Region: </span>{region}</div>\r\n          <div><span className=\"country-card-data-text-bold\">Capital: </span>{capital}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport CountryCard from './country-card/CountryCard'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport './CountriesContainer.css'\r\n\r\nexport default function CountriesContainer({\r\n  countries\r\n}) {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <div className=\"countries-container\">\r\n      {countries.map((country, index) => (\r\n        <div key={index} className=\"country-card-wrapper\">\r\n          <CountryCard\r\n            capital={country.capital}\r\n            flag={country.flag}\r\n            name={country.name}\r\n            onClick={() => history.push(`/country/${country.name}`)}\r\n            population={country.population}\r\n            region={country.region}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\n\r\nimport './FilterCountriesTextInput.css'\r\n\r\nexport default function FilterCountriesTextInput\r\n({\r\n  onChange,\r\n  value\r\n}) {\r\n  return (\r\n    <div className=\"filter-countries-text-input-container\">\r\n      <label className=\"filter-countries-text-label\" htmlFor=\"filter-countries-text-input\">Filter Text Input</label>\r\n      <input className=\"filter-countries-text-input\" id=\"filter-countries-text-input\" name=\"filter-countries-text-input\" onChange={onChange} value={value} placeholder=\"e.g. Brazil\"/>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport './FilterRegionDropdown.css'\r\n\r\nexport default function FilterRegionDropdown({\r\n  onChange,\r\n  options\r\n}) {\r\n  return (\r\n    <select className=\"filter-region-dropdown\" onChange={onChange}>\r\n      <option defaultValue value={''}>None</option>\r\n      {options.map(option => (\r\n        <option key={option} value={option}>{option}</option>\r\n      ))}\r\n    </select>\r\n  )\r\n}","/**\r\n * @description Function used to extract the regions out of\r\n * an array of countries, for the filter regions control\r\n * @param {Array<Object>} countries (from API)\r\n * @returns {Array<String>}\r\n */\r\nexport function extractRegions(countries) {\r\n  const regions = countries.map(country => country.region)\r\n  return [...new Set(regions)].filter(region => region !== '')\r\n}\r\n\r\n/**\r\n * @description Function used to get the \"filtered\" version of\r\n * a countries array, where the filter can be applied by the user;\r\n * this is essentially a wrapper for calling both filter by country\r\n * and region\r\n * @param {Array<Object>} countries (from API)\r\n * @param {String} regionFilter\r\n * @param {String} nameFilter\r\n * @returns {Array<Object>}\r\n */\r\nexport function filterCountries(countries, regionsFilter = '', nameFilter = '') {\r\n  const filteredByRegions = filterCountriesByRegion(countries, regionsFilter)\r\n  return filterCountriesByName(filteredByRegions, nameFilter)\r\n}\r\n\r\n/**\r\n * @description Function used to filter countries by region\r\n * @param {Array<Object>} countries (from API)\r\n * @param {String} nameFilter\r\n * @returns {Array<Object>}\r\n */\r\nexport function filterCountriesByName(countries, nameFilter = '') {\r\n  // Normalize to ensure proper comparison \r\n  const lowerCasedNameFilter = nameFilter.toLowerCase() \r\n  return nameFilter.trim() !== '' ? countries.filter(country => country.name.toLowerCase().includes(lowerCasedNameFilter)) : countries\r\n}\r\n\r\n/**\r\n * @description Function used to filter countries by region\r\n * @param {Array<Object>} countries (from API)\r\n * @param {String} regionFilter\r\n * @returns {Array<Object>}\r\n */\r\nexport function filterCountriesByRegion(countries, regionFilter) {\r\n  return regionFilter !== '' ? countries.filter(country => country.region === regionFilter) : countries\r\n}","import React from 'react'\r\n\r\nconst AppContext = React.createContext()\r\nexport default AppContext","import React, { useContext, useEffect, useState } from 'react'\r\nimport CountriesContainer from '../../components/countries-container/CountriesContainer'\r\nimport FilterCountriesTextInput from '../../components/filter-countries-text-input/FilterCountriesTextInput'\r\nimport FilterRegionDropdown from '../../components/filter-region-dropdown/FilterRegionDropdown'\r\nimport { extractRegions, filterCountries } from './home-utils'\r\nimport AppContext from '../../app-context'\r\n\r\nimport './Home.css'\r\n\r\nexport function HomeCore({\r\n  countries,\r\n  onChangeForCountriesInput,\r\n  onChangeForRegionInput,\r\n  regions,\r\n  valueForFilterCountries,\r\n  valueForFilterRegion\r\n}) {\r\n  const filteredCountries = filterCountries(countries, valueForFilterRegion, valueForFilterCountries)\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <HomeFormControls\r\n        onChangeForCountriesInput={onChangeForCountriesInput}\r\n        onChangeForRegionInput={onChangeForRegionInput}\r\n        optionsForRegionDropdown={regions}\r\n        valueForFilterCountries={valueForFilterCountries}\r\n      />\r\n      <CountriesContainer countries={filteredCountries}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction HomeFormControls({\r\n  onChangeForCountriesInput,\r\n  onChangeForRegionInput,\r\n  optionsForRegionDropdown,\r\n  valueForFilterCountries\r\n}) {\r\n  return (\r\n    <div className=\"home-form-controls\">\r\n      <FilterCountriesTextInput\r\n        onChange={onChangeForCountriesInput}\r\n        value={valueForFilterCountries}\r\n      />\r\n      <FilterRegionDropdown\r\n        onChange={onChangeForRegionInput}\r\n        options={optionsForRegionDropdown}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function HomeWrapper() {\r\n  const { appState, setAppState } = useContext(AppContext)\r\n  const [filterCountriesValue, setFilterCountriesValue] = useState('')\r\n  const [filterRegionValue, setFilterRegionsValue] = useState('')\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    (async function() {\r\n      /**\r\n       * HACK: Only fetch once\r\n       */\r\n      if (appState.countries.length === 0) {\r\n        const response = await fetch('https://restcountries.eu/rest/v2/all')\r\n        const data = await response.json()\r\n        setAppState({ countries: data })\r\n      }\r\n      setLoading(false)\r\n    })();\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !loading && appState.countries.length > 0 ?\r\n          <HomeCore\r\n            countries={appState.countries}\r\n            onChangeForCountriesInput={event => setFilterCountriesValue(event.target.value)}\r\n            onChangeForRegionInput={event => setFilterRegionsValue(event.target.value)}\r\n            regions={extractRegions(appState.countries)}\r\n            valueForFilterCountries={filterCountriesValue}\r\n            valueForFilterRegion={filterRegionValue}\r\n          /> :\r\n          <div>loading...</div>\r\n      }\r\n    </>\r\n  )\r\n}","import React, { useEffect, useContext, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport AppContext from '../../app-context'\r\n\r\nimport './CountrySummary.css'\r\n\r\nexport function CountrySummaryCore({\r\n  flag,\r\n  nativeName,\r\n  population,\r\n  region,\r\n  subregion,\r\n  capital,\r\n  name\r\n}) {\r\n  return (\r\n    <div className=\"country-summary\">\r\n      <div className=\"country-summary-flag-parent-container\">\r\n        <div className=\"country-summary-flag-container\">\r\n          <img src={flag} className=\"country-summary-flag\" alt={`${name} flag`}/>\r\n        </div>\r\n      </div>\r\n      <div className=\"country-summary-text-container\">\r\n        <div className=\"country-summary-name\">{name}</div>\r\n        <div className=\"country-summary-other-info-container\">\r\n          <div className=\"country-summary-other-info\">Native Name: {nativeName}</div>\r\n          <div className=\"country-summary-other-info\">Population: {population}</div>\r\n          <div className=\"country-summary-other-info\">Region: {region}</div>\r\n          <div className=\"country-summary-other-info\">Sub Region: {subregion}</div>\r\n          <div className=\"country-summary-other-info\">Capital: {capital}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function CountrySummaryWrapper() {\r\n  const { appState } = useContext(AppContext)\r\n  const { name } = useParams()\r\n  const history = useHistory()\r\n  const [countryData, setCountryData] = useState({})\r\n  const [loading, setLoading] = useState()\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Only load if there is country data\r\n     */\r\n    if (appState.countries.length === 0) {\r\n      return history.push('/')\r\n    } else {\r\n      /**\r\n       * Assume country exists for now\r\n       */\r\n      setCountryData(appState.countries.find(country => country.name.trim() === name))\r\n      setLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {!loading ?\r\n          <CountrySummaryCore\r\n            flag={countryData.flag}\r\n            nativeName={countryData.nativeName}\r\n            population={countryData.population}\r\n            region={countryData.region}\r\n            subregion={countryData.subregion}\r\n            capital={countryData.capital}\r\n            name={countryData.name}\r\n          /> :\r\n          <div>loading...</div>\r\n      }\r\n    </>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport './NavBar.css'\r\n\r\nexport default function NavBar() {\r\n  return (\r\n    <div className=\"nav-bar\">\r\n      <div className=\"nav-bar-text\">Where in the world?</div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport { HomeWrapper as Home } from './pages/home/Home'\nimport { CountrySummaryWrapper as CountrySummary } from './pages/country/CountrySummary'\nimport NavBar from './components/nav-bar/NavBar'\nimport AppContext from './app-context'\n\nfunction App() {\n  const [appState, setAppState] = useState({ countries: [] })\n\n  return (\n    <Router>\n      <AppContext.Provider value={{ appState, setAppState }}>\n        <div className=\"app\">\n          <NavBar/>\n          <Switch>\n            <Route component={CountrySummary} path=\"/country/:name\"/>\n            <Route component={Home} path=\"/\"/>\n          </Switch>\n        </div>\n      </AppContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}